/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */

// Define the terminals (tokens)
// Terminal token definitions in Parser.cup
terminal String HTML_START, HTML_END;
terminal String LINK;
terminal String QUOTE, SEMICOLON, EQUALS;
terminal ATTRIBUTE_NAME_STYLE, ATTRIBUTE_NAME_CLASS, ATTRIBUTE_NAME_HREF;
terminal HEAD_START, HEAD_END;
terminal BODY_START, BODY_END;
terminal String P_START, P_END;
terminal A_START, A_END, IMG, BR;
terminal HREF, SRC, ATTRIBUTE_VALUE, ATTRIBUTE_NAME, ATTRIBUTE, TAG_CLOSE, SELF_CLOSE;
terminal String TEXT_CONTENT;
terminal String H1_START, H1_END, H2_START, H2_END;
terminal String TITLE_START, TITLE_END;
terminal String H3_START, H3_END, H4_START, H4_END, H5_START, H5_END, H6_START, H6_END;
terminal UL_START, UL_END;
terminal OL_START, OL_END;
terminal LI_START, LI_END;
terminal TABLE_START, TABLE_END;
terminal TR_START, TR_END;
terminal TD_START, TD_END;
terminal TH_START, TH_END;
terminal FORM_START, FORM_END;
terminal INPUT;
terminal BUTTON_START, BUTTON_END;
terminal SELECT_START, SELECT_END;
terminal OPTION_START, OPTION_END;
terminal HR;


// Non-terminal definitions and grammar rules go here

/* Non terminals */


non terminal String html_element;
non terminal String head_element;
non terminal String body_element;
non terminal String content_element;
non terminal String h1_element;
non terminal String h2_element;
non terminal String paragraph_element;
non terminal String link_element;
non terminal String element;
non terminal String anchor_element;
/* Precedences */
/* The grammar rules */

html_element ::= HTML_START head_element body_element HTML_END
{: System.out.println("Valid element html"); :};
head_element ::= HEAD_START TEXT_CONTENT HEAD_END
{: System.out.println("Valid head element"); :};
body_element ::= BODY_START content_element  BODY_END
                  | 
 ;

content_element ::= content_element element
                  | 
;
element ::= h1_element
          | h2_element
          | paragraph_element
          | anchor_element
          | TEXT_CONTENT 
          | BR;
          
h2_element ::= H2_START TEXT_CONTENT H2_END
{: System.out.println("Valid <h2> element"); :};
h1_element ::= H1_START TEXT_CONTENT H1_END
{: System.out.println("Valid <h1> element"); :};
paragraph_element ::= P_START TEXT_CONTENT P_END
{: System.out.println("Valid <p> element"); :}; 

anchor_element ::= A_START TEXT_CONTENT A_END
                  {: System.out.println("Valid <a> element with link"); :};


                 