/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */

// Define the terminals (tokens)
// Terminal token definitions in Parser.cup
terminal String HTML_START, HTML_END;
terminal String LINK;
terminal String QUOTE, SEMICOLON, EQUALS;
terminal ATTRIBUTE_NAME_STYLE, ATTRIBUTE_NAME_CLASS, ATTRIBUTE_NAME_HREF;
terminal string HEAD_START, HEAD_END;
terminal BODY_START, BODY_END;
terminal String P_START, P_END;
terminal A_START, A_END, IMG, BR;
terminal HREF, SRC, ATTRIBUTE_VALUE, ATTRIBUTE_NAME, ATTRIBUTE, TAG_CLOSE, TAG_OPEN, SELF_CLOSE;
terminal String TEXT_CONTENT;
terminal String H1_START, H1_END, H2_START, H2_END;
terminal String TITLE_START, TITLE_END;
terminal String H3_START, H3_END, H4_START, H4_END, H5_START, H5_END, H6_START, H6_END;
terminal UL_START, UL_END;
terminal OL_START, OL_END;
terminal LI_START, LI_END;
terminal TABLE_START, TABLE_END;
terminal TR_START, TR_END;
terminal TD_START, TD_END;
terminal TH_START, TH_END;
terminal FORM_START, FORM_END;
terminal INPUT;
terminal BUTTON_START, BUTTON_END;
terminal SELECT_START, SELECT_END;
terminal OPTION_START, OPTION_END;
terminal HR;


// Non-terminal definitions and grammar rules go here

/* Non terminals */


non terminal String html_element;
non terminal String head_element;
non terminal String body_element;
non terminal String content_element;
non terminal String heading;
non terminal String h1_element, h2_element, h3_element, h4_element, h5_element,h6_element;
non terminal String paragraph_element;
non terminal String link_element;
non terminal String element;
non terminal String anchor_element, anchor_close;
non terminal String list_element, ordered_list_element, list_elements;
/* Precedences */
/* The grammar rules */

/*
html_element ::= TAG_OPEN HTML_START TAG_CLOSE head_element body_element TAG_OPEN HTML_END TAG_CLOSE
				{: System.out.println("Valid element html"); :}
				;
head_element ::= TAG_OPEN HEAD_START TAG_CLOSE TEXT_CONTENT TAG_OPEN HEAD_END TAG_CLOSE
				{: System.out.println("Valid head element"); :}
				;
				
body_element ::= TAG_OPEN BODY_START TAG_CLOSE content_element TAG_OPEN BODY_END TAG_CLOSE
				{: System.out.println("Valid body element"); :}
 				;

content_element ::= content_element element
                  | 
				;
element ::= heading
          | paragraph_element
          | anchor_element
          | TEXT_CONTENT 
          | BR
          | ordered_list_element
          |
          ;
          
heading ::= h1_element
          | h2_element
          | h3_element
          | h4_element
          | h5_element
          | h6_element 
          |         
          ;
h1_element ::= TAG_OPEN H1_START TAG_CLOSE  TEXT_CONTENT TAG_OPEN H1_END TAG_CLOSE
			{: System.out.println("Valid <h1> element"); :}
			;
h2_element ::= TAG_OPEN H2_START TAG_CLOSE TEXT_CONTENT TAG_OPEN H2_END TAG_CLOSE
				{: System.out.println("Valid <h2> element"); :}
				;
h3_element ::= TAG_OPEN H3_START TAG_CLOSE TEXT_CONTENT TAG_OPEN H3_END TAG_CLOSE
				{: System.out.println("Valid <h3> element"); :};
h4_element ::= TAG_OPEN H4_START TAG_CLOSE TEXT_CONTENT TAG_OPEN H4_END TAG_CLOSE
				{: System.out.println("Valid <h4> element"); :}
				;
h5_element ::= TAG_OPEN H5_START TAG_CLOSE TEXT_CONTENT TAG_OPEN H5_END TAG_CLOSE
				{: System.out.println("Valid <h5> element"); :}
				;				
h6_element ::= TAG_OPEN H6_START TAG_CLOSE TEXT_CONTENT TAG_OPEN H6_END TAG_CLOSE
				{: System.out.println("Valid <h6> element"); :}
				;
				
anchor_element ::= TAG_OPEN A_START ATTRIBUTE_NAME_HREF EQUALS ATTRIBUTE_VALUE TAG_CLOSE TEXT_CONTENT TAG_OPEN A_END TAG_CLOSE
                  {: System.out.println("Valid <a> element with link"); :}
                  ;
                  
paragraph_element ::= TAG_OPEN P_START TAG_CLOSE TEXT_CONTENT TAG_OPEN P_END TAG_CLOSE
					{: System.out.println("Valid <p> element"); :}
					;
*/
	
list_element ::= TAG_OPEN LI_START TAG_CLOSE TEXT_CONTENT TAG_OPEN LI_END TAG_CLOSE
               {: System.out.println("Valid <li> element"); :}
               | 
             ;



list_elements ::= list_element list_elements
                | list_element
                ;

/*
ordered_list_element ::= TAG_OPEN OL_START TAG_CLOSE list_elements TAG_OPEN OL_END TAG_CLOSE
                        {: System.out.println("Valid ordered list <ol> with multiple items"); :}
                      ;
*/



                 