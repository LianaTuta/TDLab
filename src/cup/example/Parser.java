
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\006\000\002\002\004\000\002\003" +
    "\005\000\002\004\005\000\002\004\002\000\002\005\004" +
    "\000\002\005\002\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\007\005\000\002\006\005\000\002\010" +
    "\005\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\004\004\004\001\002\000\004\015\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\006\005\ufffd\017\014\001\002\000\004\036\011\001" +
    "\002\000\004\016\012\001\002\000\006\005\uffff\017\uffff" +
    "\001\002\000\004\005\042\001\002\000\020\020\ufffb\021" +
    "\ufffb\023\ufffb\026\ufffb\036\ufffb\037\ufffb\041\ufffb\001\002" +
    "\000\020\020\021\021\024\023\022\026\026\036\031\037" +
    "\027\041\017\001\002\000\020\020\ufff8\021\ufff8\023\ufff8" +
    "\026\ufff8\036\ufff8\037\ufff8\041\ufff8\001\002\000\004\036" +
    "\040\001\002\000\020\020\ufffa\021\ufffa\023\ufffa\026\ufffa" +
    "\036\ufffa\037\ufffa\041\ufffa\001\002\000\004\005\ufffe\001" +
    "\002\000\004\036\036\001\002\000\020\020\ufff7\021\ufff7" +
    "\023\ufff7\026\ufff7\036\ufff7\037\ufff7\041\ufff7\001\002\000" +
    "\004\036\034\001\002\000\020\020\ufffc\021\ufffc\023\ufffc" +
    "\026\ufffc\036\ufffc\037\ufffc\041\ufffc\001\002\000\020\020" +
    "\ufff5\021\ufff5\023\ufff5\026\ufff5\036\ufff5\037\ufff5\041\ufff5" +
    "\001\002\000\004\036\032\001\002\000\020\020\ufff9\021" +
    "\ufff9\023\ufff9\026\ufff9\036\ufff9\037\ufff9\041\ufff9\001\002" +
    "\000\020\020\ufff6\021\ufff6\023\ufff6\026\ufff6\036\ufff6\037" +
    "\ufff6\041\ufff6\001\002\000\004\040\033\001\002\000\020" +
    "\020\ufff3\021\ufff3\023\ufff3\026\ufff3\036\ufff3\037\ufff3\041" +
    "\ufff3\001\002\000\004\022\035\001\002\000\020\020\ufff2" +
    "\021\ufff2\023\ufff2\026\ufff2\036\ufff2\037\ufff2\041\ufff2\001" +
    "\002\000\004\024\037\001\002\000\020\020\ufff1\021\ufff1" +
    "\023\ufff1\026\ufff1\036\ufff1\037\ufff1\041\ufff1\001\002\000" +
    "\004\042\041\001\002\000\020\020\ufff4\021\ufff4\023\ufff4" +
    "\026\ufff4\036\ufff4\037\ufff4\041\ufff4\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\014\001\001\000\014" +
    "\006\017\007\027\010\015\012\024\013\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // html_element ::= HTML_START head_element body_element HTML_END 
            {
              String RESULT =null;
		//@@CUPDBG3
 System.out.println("Valid element html"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("html_element",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= html_element EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // head_element ::= HEAD_START TEXT_CONTENT HEAD_END 
            {
              String RESULT =null;
		//@@CUPDBG4
 System.out.println("Valid head element"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_element",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body_element ::= BODY_START content_element BODY_END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_element",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body_element ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_element",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // content_element ::= content_element element 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_element",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // content_element ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_element",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // element ::= h1_element 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // element ::= h2_element 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // element ::= paragraph_element 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // element ::= anchor_element 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // element ::= TEXT_CONTENT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // element ::= BR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // h2_element ::= H2_START TEXT_CONTENT H2_END 
            {
              String RESULT =null;
		//@@CUPDBG5
 System.out.println("Valid <h2> element"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h2_element",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // h1_element ::= H1_START TEXT_CONTENT H1_END 
            {
              String RESULT =null;
		//@@CUPDBG6
 System.out.println("Valid <h1> element"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h1_element",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paragraph_element ::= P_START TEXT_CONTENT P_END 
            {
              String RESULT =null;
		//@@CUPDBG7
 System.out.println("Valid <p> element"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paragraph_element",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // anchor_element ::= A_START TEXT_CONTENT A_END 
            {
              String RESULT =null;
		//@@CUPDBG8
 System.out.println("Valid <a> element with link"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("anchor_element",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
