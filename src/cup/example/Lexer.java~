/* The following code was generated by JFlex 1.3.5 on 11/4/24, 8:29 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/4/24, 8:29 PM from the specification file
 * <tt>file:/C:/tot/facultate/gitAnul2/FacultateAnul2/sem2/OOD/TDProject/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\2\0\1\1\16\0\4\0\1\3\1\0\1\10"+
    "\1\0\1\0\2\0\1\12\7\0\1\20\1\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\3\0\1\0\1\32\1\13\1\31\1\17\2\0"+
    "\32\0\1\0\1\11\2\0\1\0\1\0\1\21\1\23\1\27\1\22"+
    "\1\6\1\7\1\34\1\4\1\33\2\0\1\16\1\15\1\44\1\24"+
    "\1\26\1\0\1\5\1\30\1\14\1\43\3\0\1\25\1\0\4\0"+
    "\41\0\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0\4\0"+
    "\1\0\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0"+
    "\5\0\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0"+
    "\2\0\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0"+
    "\1\0\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\246\0"+
    "\1\0\46\0\2\0\1\0\6\0\51\0\6\0\1\0\1\0\55\0"+
    "\1\0\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0"+
    "\4\0\4\0\15\0\6\0\5\0\1\0\4\0\13\0\1\0\1\0"+
    "\3\0\53\0\37\0\4\0\2\0\1\0\143\0\1\0\1\0\10\0"+
    "\1\0\6\0\2\0\2\0\1\0\4\0\2\0\12\0\3\0\2\0"+
    "\1\0\17\0\1\0\1\0\1\0\36\0\33\0\2\0\131\0\13\0"+
    "\1\0\16\0\12\0\41\0\11\0\2\0\4\0\1\0\2\0\1\0"+
    "\30\0\4\0\1\0\11\0\1\0\3\0\1\0\5\0\22\0\31\0"+
    "\3\0\4\0\13\0\65\0\25\0\1\0\22\0\13\0\61\0\66\0"+
    "\3\0\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0"+
    "\20\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0"+
    "\1\0\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0"+
    "\2\0\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0"+
    "\2\0\12\0\4\0\7\0\2\0\1\0\1\0\2\0\3\0\1\0"+
    "\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0"+
    "\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0\14\0\3\0"+
    "\1\0\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\10\0\1\0"+
    "\3\0\1\0\3\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0"+
    "\1\0\1\0\7\0\1\0\6\0\1\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\1\0\1\0\7\0\2\0\2\0\2\0\3\0\7\0\3\0\4\0"+
    "\2\0\1\0\3\0\2\0\2\0\12\0\1\0\1\0\20\0\1\0"+
    "\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0"+
    "\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0"+
    "\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0"+
    "\12\0\11\0\1\0\6\0\5\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\20\0\3\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0"+
    "\2\0\1\0\3\0\5\0\2\0\2\0\2\0\12\0\20\0\1\0"+
    "\3\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0"+
    "\5\0\2\0\1\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0"+
    "\2\0\7\0\1\0\1\0\2\0\2\0\2\0\12\0\1\0\2\0"+
    "\15\0\4\0\11\0\1\0\3\0\1\0\51\0\2\0\1\0\7\0"+
    "\1\0\3\0\1\0\4\0\1\0\5\0\3\0\1\0\7\0\3\0"+
    "\2\0\2\0\12\0\12\0\6\0\1\0\3\0\1\0\22\0\3\0"+
    "\30\0\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0"+
    "\6\0\1\0\1\0\1\0\10\0\6\0\12\0\2\0\2\0\15\0"+
    "\60\0\1\0\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0"+
    "\2\0\1\0\1\0\1\0\5\0\1\0\30\0\1\0\1\0\1\0"+
    "\12\0\1\0\2\0\11\0\1\0\2\0\5\0\1\0\1\0\1\0"+
    "\6\0\2\0\12\0\2\0\4\0\40\0\1\0\27\0\2\0\6\0"+
    "\12\0\13\0\1\0\1\0\1\0\1\0\1\0\4\0\2\0\10\0"+
    "\1\0\44\0\4\0\24\0\1\0\2\0\5\0\13\0\1\0\44\0"+
    "\11\0\1\0\71\0\53\0\24\0\1\0\12\0\6\0\6\0\4\0"+
    "\4\0\3\0\1\0\3\0\2\0\7\0\3\0\4\0\15\0\14\0"+
    "\1\0\17\0\2\0\46\0\1\0\1\0\5\0\1\0\2\0\53\0"+
    "\1\0\u014d\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0"+
    "\2\0\51\0\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0"+
    "\1\0\1\0\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0"+
    "\2\0\103\0\2\0\3\0\40\0\20\0\20\0\126\0\2\0\6\0"+
    "\3\0\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0\3\0\13\0"+
    "\7\0\15\0\1\0\4\0\3\0\13\0\22\0\3\0\13\0\22\0"+
    "\2\0\14\0\15\0\1\0\3\0\1\0\2\0\14\0\64\0\40\0"+
    "\3\0\1\0\3\0\2\0\1\0\2\0\12\0\41\0\4\0\1\0"+
    "\12\0\6\0\131\0\7\0\5\0\2\0\42\0\1\0\1\0\5\0"+
    "\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0\12\0\36\0"+
    "\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\0\46\0\27\0"+
    "\5\0\4\0\65\0\12\0\1\0\35\0\2\0\13\0\6\0\12\0"+
    "\15\0\1\0\10\0\16\0\1\0\2\0\77\0\5\0\57\0\21\0"+
    "\7\0\4\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0"+
    "\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0"+
    "\12\0\44\0\2\0\11\0\7\0\53\0\2\0\3\0\20\0\3\0"+
    "\1\0\25\0\4\0\1\0\6\0\1\0\2\0\3\0\1\0\5\0"+
    "\300\0\72\0\1\0\5\0\u0116\0\2\0\6\0\2\0\46\0\2\0"+
    "\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0"+
    "\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0"+
    "\7\0\16\0\5\0\32\0\5\0\20\0\2\0\23\0\1\0\13\0"+
    "\5\0\1\0\12\0\1\0\1\0\15\0\1\0\20\0\15\0\3\0"+
    "\40\0\20\0\15\0\4\0\1\0\3\0\14\0\21\0\1\0\4\0"+
    "\1\0\2\0\12\0\1\0\1\0\3\0\5\0\6\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\4\0\1\0\13\0\2\0\4\0\5\0"+
    "\5\0\4\0\1\0\21\0\51\0\u0a77\0\57\0\1\0\57\0\1\0"+
    "\205\0\6\0\4\0\3\0\2\0\14\0\46\0\1\0\1\0\5\0"+
    "\1\0\2\0\70\0\7\0\1\0\17\0\1\0\27\0\11\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\40\0\57\0\1\0\u01d5\0\3\0"+
    "\31\0\11\0\6\0\1\0\5\0\2\0\5\0\4\0\126\0\2\0"+
    "\2\0\2\0\3\0\1\0\132\0\1\0\4\0\5\0\53\0\1\0"+
    "\136\0\21\0\40\0\60\0\20\0\u0200\0\u19c0\0\100\0\u51fd\0\3\0"+
    "\u048d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0\24\0"+
    "\57\0\1\0\4\0\12\0\1\0\37\0\2\0\120\0\2\0\45\0"+
    "\11\0\2\0\147\0\2\0\65\0\2\0\11\0\52\0\15\0\1\0"+
    "\3\0\1\0\4\0\1\0\27\0\5\0\4\0\1\0\13\0\1\0"+
    "\7\0\64\0\14\0\2\0\62\0\22\0\12\0\12\0\6\0\22\0"+
    "\6\0\3\0\1\0\1\0\2\0\13\0\34\0\10\0\2\0\27\0"+
    "\15\0\14\0\35\0\3\0\4\0\57\0\16\0\16\0\1\0\12\0"+
    "\6\0\5\0\1\0\12\0\12\0\5\0\1\0\51\0\16\0\11\0"+
    "\3\0\1\0\10\0\2\0\2\0\12\0\6\0\27\0\3\0\1\0"+
    "\3\0\62\0\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0"+
    "\1\0\1\0\30\0\3\0\2\0\13\0\5\0\2\0\3\0\2\0"+
    "\12\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0"+
    "\1\0\53\0\1\0\16\0\6\0\163\0\10\0\1\0\2\0\2\0"+
    "\12\0\6\0\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0"+
    "\152\0\46\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0"+
    "\15\0\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0"+
    "\154\0\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\15\0\3\0"+
    "\20\0\20\0\20\0\3\0\2\0\30\0\3\0\31\0\1\0\6\0"+
    "\5\0\1\0\207\0\2\0\1\0\4\0\1\0\13\0\12\0\7\0"+
    "\32\0\4\0\1\0\1\0\32\0\13\0\131\0\3\0\6\0\2\0"+
    "\6\0\2\0\6\0\2\0\3\0\3\0\2\0\3\0\2\0\22\0"+
    "\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    37,    74,   111,   148,   185,   222,   259,   296,    37, 
      333,   370,    74,    74,   407,   222,    37,   444,   259,   481, 
      518,   555,   592,   629,   666,    37,   703,   740,   777,   814, 
      851,   888,   925,   962,   999,  1036,  1073,  1110,  1147,  1184, 
     1221,  1258,  1295,  1332,  1369,  1406,  1443,  1480,  1517,  1554, 
     1591,  1628,  1665,  1702,  1739,  1776,  1813,  1850,  1887,  1924, 
     1961,  1998,  2035,  2072,  2109,    37,  2146,  2183,  2220,  2257, 
     2294,  2331,    74,  2368,  2405,    37,    37,    37,    37,    37, 
       37,  2442,    37,    37,  2479,    37,  2516,    37,  2553,  2590, 
     2627,  2664,  2701,  2738,  2775,  2812,  2849,  2886,  2923,  2960, 
     2997,  3034,  3071,    37,  3108,  3145,  3182,  3219,    37,  3256, 
     3293,  3330,  3367,  3404,    37,  3441,  3478,    37,  3515,    37, 
     3552,  3589,  3626,  3663,  3700,  3737,  3774,  3811,  3848,    37, 
       37,    37,    37,    37,    37,  3885,    37,    37,  3922,    37, 
     3959,    37,  3996,  4033,    37,  4070,  4107,    37,    37,  4144, 
     4181,  4218,  4255,  4292,    74,    74,    37,    37,    37,  4329, 
     4366,  4403,  4440,  4477,  4514,  4551,  4588,  4625,  4662,  4699, 
       37,  4736,  4773,  4810,    37,    37,    37,    37,    37,    37, 
     4847,  4884,    37,  4921,  4958,  4995,  5032,  5069,  5106,    37, 
       37,  5143,  5180,  5217,    37,    37,    37,    37,    37,    37
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\4\1\6\3\3\1\7\1\3"+
    "\1\10\1\11\3\3\1\12\7\3\1\13\1\14\1\15"+
    "\1\16\12\3\45\0\2\3\1\0\5\3\1\0\1\3"+
    "\2\0\3\3\1\0\26\3\1\4\1\5\1\4\4\3"+
    "\1\0\1\3\2\0\3\3\1\0\25\3\1\0\3\5"+
    "\41\0\2\3\1\0\2\3\1\17\2\3\1\0\1\3"+
    "\2\0\3\3\1\0\25\3\1\20\2\0\5\20\1\21"+
    "\1\22\33\20\1\23\2\0\6\23\1\24\1\21\32\23"+
    "\4\0\1\25\2\0\1\26\4\0\1\27\1\0\1\30"+
    "\1\0\1\31\1\32\1\0\1\33\1\34\1\0\1\35"+
    "\1\0\1\36\2\0\1\37\7\0\1\40\1\0\2\3"+
    "\1\0\5\3\1\0\1\3\2\0\2\3\1\41\1\0"+
    "\27\3\1\0\5\3\1\0\1\3\2\0\1\42\2\3"+
    "\1\0\27\3\1\0\3\3\1\43\1\3\1\0\1\3"+
    "\2\0\3\3\1\0\25\3\2\20\1\0\42\20\2\23"+
    "\1\0\42\23\6\0\1\44\5\0\1\45\20\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\26\0\1\54\24\0"+
    "\1\55\1\56\13\0\1\57\1\60\10\0\1\61\44\0"+
    "\1\62\15\0\1\63\2\0\1\64\4\0\1\65\1\0"+
    "\1\66\2\0\1\67\1\0\1\70\1\71\1\0\1\72"+
    "\1\0\1\73\12\0\1\74\6\0\1\75\16\0\1\76"+
    "\16\0\1\77\17\0\1\100\7\0\1\101\35\0\1\102"+
    "\33\0\1\103\53\0\1\104\26\0\1\105\16\0\1\106"+
    "\26\0\2\3\1\0\5\3\1\0\1\3\2\0\3\3"+
    "\1\0\1\3\1\107\25\3\1\0\5\3\1\0\1\3"+
    "\2\0\3\3\1\0\5\3\1\110\21\3\1\0\4\3"+
    "\1\111\1\0\1\3\2\0\3\3\1\0\25\3\21\0"+
    "\1\112\40\0\1\113\46\0\1\114\44\0\1\115\44\0"+
    "\1\116\44\0\1\117\44\0\1\120\44\0\1\121\32\0"+
    "\1\122\56\0\1\123\44\0\1\124\50\0\1\125\40\0"+
    "\1\126\41\0\1\127\47\0\1\130\33\0\1\131\5\0"+
    "\1\132\20\0\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\26\0\1\141\24\0\1\142\1\143\13\0\1\144\1\145"+
    "\10\0\1\146\44\0\1\147\30\0\1\150\51\0\1\151"+
    "\16\0\1\152\17\0\1\153\7\0\1\154\35\0\1\155"+
    "\33\0\1\156\54\0\1\157\46\0\1\160\46\0\1\161"+
    "\36\0\1\162\47\0\1\163\41\0\1\164\46\0\1\165"+
    "\62\0\1\166\36\0\1\167\35\0\1\170\25\0\2\3"+
    "\1\0\5\3\1\0\1\3\2\0\3\3\1\0\10\3"+
    "\1\171\16\3\1\0\5\3\1\0\1\3\2\0\2\3"+
    "\1\172\1\0\25\3\22\0\1\173\40\0\1\174\43\0"+
    "\1\175\45\0\1\176\44\0\1\177\47\0\1\200\40\0"+
    "\1\201\46\0\1\202\44\0\1\203\44\0\1\204\44\0"+
    "\1\205\44\0\1\206\44\0\1\207\32\0\1\210\56\0"+
    "\1\211\44\0\1\212\50\0\1\213\40\0\1\214\41\0"+
    "\1\215\47\0\1\216\47\0\1\217\36\0\1\220\47\0"+
    "\1\221\41\0\1\222\46\0\1\223\45\0\1\224\44\0"+
    "\1\225\52\0\1\226\33\0\1\227\63\0\1\230\17\0"+
    "\1\231\101\0\1\232\1\0\2\3\1\0\5\3\1\0"+
    "\1\3\2\0\3\3\1\0\10\3\1\233\16\3\1\0"+
    "\3\3\1\234\1\3\1\0\1\3\2\0\3\3\1\0"+
    "\25\3\17\0\1\235\44\0\1\236\44\0\1\237\33\0"+
    "\1\240\44\0\1\241\60\0\1\242\40\0\1\243\43\0"+
    "\1\244\45\0\1\245\44\0\1\246\53\0\1\247\33\0"+
    "\1\250\63\0\1\251\17\0\1\252\55\0\1\253\51\0"+
    "\1\254\44\0\1\255\47\0\1\256\31\0\1\257\47\0"+
    "\1\260\44\0\1\261\44\0\1\262\44\0\1\263\44\0"+
    "\1\264\33\0\1\265\44\0\1\266\55\0\1\267\51\0"+
    "\1\270\44\0\1\271\47\0\1\272\61\0\1\273\44\0"+
    "\1\274\14\0\1\275\47\0\1\276\44\0\1\277\71\0"+
    "\1\300\44\0\1\301\14\0\1\302\47\0\1\303\44\0"+
    "\1\304\44\0\1\305\44\0\1\306\44\0\1\307\44\0"+
    "\1\310\25\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  8,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  1,  1,  1,  0,  0,  9,  9,  9,  9,  9, 
     9,  0,  9,  9,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  9,  0,  0,  9,  0,  9,  1,  1,  0,  0,  0,  0,  0,  0, 
     0,  9,  9,  9,  9,  9,  9,  0,  9,  9,  0,  9,  0,  9,  0,  0, 
     9,  0,  0,  9,  9,  0,  0,  0,  0,  0,  1,  1,  9,  9,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  9, 
     9,  9,  9,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  9,  9,  9,  9,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[5254];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 148: 
          {  return symbolFactory.newSymbol("BR", BR);  }
        case 201: break;
        case 196: 
          {  return symbolFactory.newSymbol("SELECT_START", SELECT_START);  }
        case 202: break;
        case 195: 
          {  return symbolFactory.newSymbol("OPTION_START", OPTION_START);  }
        case 203: break;
        case 194: 
          {  return symbolFactory.newSymbol("BUTTON_START", BUTTON_START);  }
        case 204: break;
        case 65: 
          {  return symbolFactory.newSymbol("P_START", P_START);  }
        case 205: break;
        case 25: 
          {  return symbolFactory.newSymbol("A_START", A_START);  }
        case 206: break;
        case 174: 
          {  return symbolFactory.newSymbol("INPUT", INPUT);  }
        case 207: break;
        case 6: 
          {  return symbolFactory.newSymbol("QUOTE", QUOTE);  }
        case 208: break;
        case 7: 
          {  return symbolFactory.newSymbol("QUOTE", QUOTE);  }
        case 209: break;
        case 103: 
          {  return symbolFactory.newSymbol("A_END", A_END);  }
        case 210: break;
        case 108: 
          {  return symbolFactory.newSymbol("P_END", P_END);  }
        case 211: break;
        case 199: 
          {  return symbolFactory.newSymbol("SELECT_END", SELECT_END);  }
        case 212: break;
        case 198: 
          {  return symbolFactory.newSymbol("OPTION_END", OPTION_END);  }
        case 213: break;
        case 197: 
          {  return symbolFactory.newSymbol("BUTTON_END", BUTTON_END);  }
        case 214: break;
        case 170: 
          {  return symbolFactory.newSymbol("BODY_START", BODY_START);  }
        case 215: break;
        case 158: 
          {  return symbolFactory.newSymbol("FORM_START", FORM_START);  }
        case 216: break;
        case 157: 
          {  return symbolFactory.newSymbol("HTML_START", HTML_START);  }
        case 217: break;
        case 156: 
          {  return symbolFactory.newSymbol("HEAD_START", HEAD_START);  }
        case 218: break;
        case 117: 
          {  return symbolFactory.newSymbol("IMG", IMG);  }
        case 219: break;
        case 182: 
          {  return symbolFactory.newSymbol("BODY_END", BODY_END);  }
        case 220: break;
        case 179: 
          {  return symbolFactory.newSymbol("FORM_END", FORM_END);  }
        case 221: break;
        case 178: 
          {  return symbolFactory.newSymbol("HTML_END", HTML_END);  }
        case 222: break;
        case 177: 
          {  return symbolFactory.newSymbol("HEAD_END", HEAD_END);  }
        case 223: break;
        case 79: 
          {  return symbolFactory.newSymbol("H5_START", H5_START);  }
        case 224: break;
        case 78: 
          {  return symbolFactory.newSymbol("H4_START", H4_START);  }
        case 225: break;
        case 77: 
          {  return symbolFactory.newSymbol("H3_START", H3_START);  }
        case 226: break;
        case 76: 
          {  return symbolFactory.newSymbol("H2_START", H2_START);  }
        case 227: break;
        case 75: 
          {  return symbolFactory.newSymbol("H1_START", H1_START);  }
        case 228: break;
        case 80: 
          {  return symbolFactory.newSymbol("H6_START", H6_START);  }
        case 229: break;
        case 82: 
          {  return symbolFactory.newSymbol("TH_START", TH_START);  }
        case 230: break;
        case 83: 
          {  return symbolFactory.newSymbol("TR_START", TR_START);  }
        case 231: break;
        case 85: 
          {  return symbolFactory.newSymbol("TD_START", TD_START);  }
        case 232: break;
        case 87: 
          {  return symbolFactory.newSymbol("LI_START", LI_START);  }
        case 233: break;
        case 114: 
          {  return symbolFactory.newSymbol("OL_START", OL_START);  }
        case 234: break;
        case 119: 
          {  return symbolFactory.newSymbol("UL_START", UL_START);  }
        case 235: break;
        case 176: 
          {  return symbolFactory.newSymbol("TITLE_START", TITLE_START);  }
        case 236: break;
        case 175: 
          {  return symbolFactory.newSymbol("TABLE_START", TABLE_START);  }
        case 237: break;
        case 8: 
          {  emit_warning("Unrecognized character here '" + yytext() + "' -- ignored");  }
        case 238: break;
        case 2: 
        case 5: 
        case 10: 
        case 11: 
        case 14: 
        case 32: 
        case 33: 
        case 34: 
        case 70: 
        case 71: 
        case 120: 
        case 121: 
          { if (!yytext().equals("href")) return symbolFactory.newSymbol("TEXT_CONTENT", TEXT_CONTENT, yytext().trim());   }
        case 239: break;
        case 190: 
          {  return symbolFactory.newSymbol("TITLE_END", TITLE_END);  }
        case 240: break;
        case 189: 
          {  return symbolFactory.newSymbol("TABLE_END", TABLE_END);  }
        case 241: break;
        case 9: 
          {  return symbolFactory.newSymbol("TAG_CLOSE", TAG_CLOSE);  }
        case 242: break;
        case 13: 
          {  return symbolFactory.newSymbol("SEMICOLON", SEMICOLON);  }
        case 243: break;
        case 155: 
          {  return symbolFactory.newSymbol("ATTRIBUTE_NAME_STYLE", ATTRIBUTE_NAME_STYLE);  }
        case 244: break;
        case 154: 
          {  return symbolFactory.newSymbol("ATTRIBUTE_NAME_CLASS", ATTRIBUTE_NAME_CLASS);  }
        case 245: break;
        case 16: 
          {  return symbolFactory.newSymbol("ATTRIBUTE_VALUE", ATTRIBUTE_VALUE, yytext());  }
        case 246: break;
        case 147: 
          {  return symbolFactory.newSymbol("UL_END", UL_END);  }
        case 247: break;
        case 144: 
          {  return symbolFactory.newSymbol("OL_END", OL_END);  }
        case 248: break;
        case 141: 
          {  return symbolFactory.newSymbol("LI_END", LI_END);  }
        case 249: break;
        case 139: 
          {  return symbolFactory.newSymbol("TD_END", TD_END);  }
        case 250: break;
        case 12: 
          {  return symbolFactory.newSymbol("EQUALS", EQUALS);  }
        case 251: break;
        case 129: 
          {  return symbolFactory.newSymbol("H1_END", H1_END);  }
        case 252: break;
        case 130: 
          {  return symbolFactory.newSymbol("H2_END", H2_END);  }
        case 253: break;
        case 131: 
          {  return symbolFactory.newSymbol("H3_END", H3_END);  }
        case 254: break;
        case 132: 
          {  return symbolFactory.newSymbol("H4_END", H4_END);  }
        case 255: break;
        case 133: 
          {  return symbolFactory.newSymbol("H5_END", H5_END);  }
        case 256: break;
        case 134: 
          {  return symbolFactory.newSymbol("H6_END", H6_END);  }
        case 257: break;
        case 136: 
          {  return symbolFactory.newSymbol("TH_END", TH_END);  }
        case 258: break;
        case 137: 
          {  return symbolFactory.newSymbol("TR_END", TR_END);  }
        case 259: break;
        case 72: 
          {  return symbolFactory.newSymbol("ATTRIBUTE_NAME_HREF", ATTRIBUTE_NAME_HREF);  }
        case 260: break;
        case 3: 
        case 4: 
          {  }
        case 261: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
